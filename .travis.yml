sudo: false

language: cpp

cache:
  ccache: true
  directories:
    - $HOME/.ccache
    - $CLING_BUILD_DEPS

env:
  global:
    USE_CCACHE=1
    CCACHE_COMPRESS=1
    CCACHE_MAXSIZE=500M
    CCACHE_CPP2=1
    CLING_BUILD_DEPS=$TRAVIS_BUILD_DIR/deps/
    CLING_LOCAL_BIN=$TRAVIS_BUILD_DIR/bin/
    TIMEOUT=0

# Do not build our sync branch.
branches:
  except:
    - /^__internal.*$/
  only:
    - cling

matrix:
  # Abort all builds on a single failing matrix entry.
  fast_finish: true

  exclude:
    # Note: Workaround travis-ci/travis-ci#4681
    # Exclude default job which lacks our included environment variables.
    - os: osx
    - os: linux

  include:

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode6.4
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.1
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.2
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.3
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode8
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode6.4
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.1
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.2
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.3
      compiler: clang

    - os: osx
      env: CXXLIB=libc++ COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode8
      compiler: clang

# If cmake is not in the cache, download it.
install:
- |
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Linux-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/bin/cmake
  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    brew install ccache python
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Darwin-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/CMake.app/Contents/bin/cmake
    PATH=/usr/local/opt/ccache/libexec:$PATH
    # Try to workaround travis-ci/travis-ci#6410 by
    # introducing a timeout fulction, which will timeout before the builder,
    # returning a 'fake' success (eg. 0), tricking it to store the cache.
    TIMEOUT=2400
  fi

  # Implement a platform-independent timeout function.
  function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

  if [ ! -f $CMAKE ]; then
    mkdir -pv $CLING_BUILD_DEPS/cmake
    travis_retry curl -k $CMAKE_URL | tar --strip-components=1 -xz -C $CLING_BUILD_DEPS/cmake
  fi

before_script:
 - $CMAKE --version
 - export CXX="ccache $COMPILER"
 - export CC="ccache $CCOMPILER"

script:
- $CXX --version
#- $CXX -E -x c++ - -v < /dev/null # Debug header search path
- |
  function githubRepoExists() {
    curl --fail "https://api.github.com/repos/$1/$2" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo 1
    else
      echo 0
    fi
  }
  REPO=`basename "$TRAVIS_REPO_SLUG"`
  USER=`dirname "$TRAVIS_REPO_SLUG"`
  if [ "$USER" != "marsupial" ]; then
    if [ -z $TRAVIS_TAG ]; then
      timeout $TIMEOUT tools/packaging/cpt.py --current-dev=tar --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG --verbose --debug-on-error
    else
      tools/packaging/cpt.py --last-stable=tar --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG
    fi
  else
    timeout $TIMEOUT tools/packaging/cpt.py --current-dev=branch:cling --with-llvm-url="https://github.com/$USER/llvm.git" --with-clang-url="https://github.com/$USER/clang.git" --with-cling-url="https://github.com/$USER/$REPO.git" --configure="-DBUILD_SHARED_LIBS=ON -DCLING_CLANG_RUNTIME_PATCH=ON -DCLING_OBJC_SUPPORT=ON" --compiler="$COMPILER" --stdlib="$CXXLIB"
  fi

  # Convert the timeout exit code to 0.
  RESULT=$?; if [ $RESULT -eq 0 ] || [ $RESULT -eq 142 ]; then true; else false; fi;

- ccache -s

notifications:
  recipients:
  - machtyrtle@gmail.com
  email:
    on_success: change
    on_failure: always
  template:
    - "%{repository}/%{branch} (%{commit} - %{author}): %{message}"
    - "Build details: %{build_url}"
    - "Change view : %{compare_url}"

before_deploy:
- export RELEASE_TARBALL=$(ls $HOME/ci/build/cling*.tar.bz2)
- echo "Deploying $RELEASE_TARBALL to GitHub releases"

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: eIwVHJNxkAIi6IUYyx7qI1szsgWt3c42ugcJ1vZ6iH//+qJgks77I8dMlbRf0RUrhxpJhJPH5a6vqI/mo1Vq2vmoC8+D1DIQCbj+/WHhY71LQCPC+Wgj2JES5y1Wh91nMt4ybzb1dA8BIfeJOdCUn7ezJTGKk18N+h2jE+a/7IE=
  file: '${RELEASE_TARBALL}'
  on:
    tags: true
    repo: $TRAVIS_REPO_SLUG

after_failure:
- |
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeOutput.log
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeError.log
